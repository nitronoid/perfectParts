#ifndef EMITTER_H
#define EMITTER_H

#include <memory>
#include <vector>
#include <glm/glm.hpp>
#include <QDir>
#include "pngutils.h"
#include "Particle.h"

//------------------------------------------------------------------------------------------------------------------------
/// \file Emitter.h
/// \author Jack Diver
/// \version 3.1
/// \date Last Revision 03/05/17 Updated to NCCA coding standard \n

/// Revision History: See "https://github.com/nitronoid/perfectParts"
/// Initial Version 20/03/17

/// \class Emitter
/// \brief encapsulates a particle emitter
/// \todo add more variables for gui
//------------------------------------------------------------------------------------------------------------------------


class Emitter
{
public:

                /*The following variables are used as settings for creating particle objects,
                 * they are public to allow the user to manipulate them using the GUI
                 */
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag used to determine whether the emitter should clear dead particles from m_particles when unused,
  /// this will save memory but could slow down the system
  //----------------------------------------------------------------------------------------------------------------------
  bool           m_reduceMemory = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag used to spawn flame into the system
  //----------------------------------------------------------------------------------------------------------------------
  bool           m_flame = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Colour that the new flame will be
  //----------------------------------------------------------------------------------------------------------------------
  glm::vec4      m_flCol = glm::vec4(1.0f,0.67f,0.0f,1.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Speed of the flame
  //----------------------------------------------------------------------------------------------------------------------
  float          m_flSpeed = 1.2f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Average life of flame particles
  //----------------------------------------------------------------------------------------------------------------------
  int            m_flLife = 40;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Amount of spawning particles to add every frame
  //----------------------------------------------------------------------------------------------------------------------
  int            m_flDensity = 10;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spread of intial flame particle positions
  //----------------------------------------------------------------------------------------------------------------------
  float          m_flSpread = 2.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Emitter angle for the flame particles
  //----------------------------------------------------------------------------------------------------------------------
  float          m_flSteepness = 0.26f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Emitter angle for the flame particles
  //----------------------------------------------------------------------------------------------------------------------
  float          m_flSize = 120.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag used to spawn a firework into the system
  //----------------------------------------------------------------------------------------------------------------------
  bool           m_firework = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Colour of the new firework
  //----------------------------------------------------------------------------------------------------------------------
  glm::vec4      m_fwCol = glm::vec4(1.0f,0.078f,0.576f,1.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag used to make new firework blink
  //----------------------------------------------------------------------------------------------------------------------
  bool           m_fwBlink = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Angle of steepness between -180 and 180 degrees, that firework is ejected
  //----------------------------------------------------------------------------------------------------------------------
  float          m_fwRotation = 0.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Angle of rotation between 0 and 360 degrees, that firework is ejected
  //----------------------------------------------------------------------------------------------------------------------
  float          m_fwIncline = 0.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initial velocity of firework
  //----------------------------------------------------------------------------------------------------------------------
  float          m_fwThrust = 1.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Amount of spawning particles in firework
  //----------------------------------------------------------------------------------------------------------------------
  int            m_fwFuel = 300;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Lifespan of firework trail particles
  //----------------------------------------------------------------------------------------------------------------------
  int            m_fwTrail = 20;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Fuse timer in frames before firework explodes
  //----------------------------------------------------------------------------------------------------------------------
  int            m_fwFuse = 95;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Lifespan of spawning particles in firework after explosion
  //----------------------------------------------------------------------------------------------------------------------
  int            m_fwExpLife = 80;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief We detonate explosions over multiple frames to simulate a chain explosion, this give a more realistic look
  //----------------------------------------------------------------------------------------------------------------------
  int            m_explosion = 0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Colour of new explosion
  //----------------------------------------------------------------------------------------------------------------------
  glm::vec4      m_expCol = glm::vec4(0.647f,0.306f,0.2f,1.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The life span of new explosion particles
  //----------------------------------------------------------------------------------------------------------------------
  int            m_expDensity = 20;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The amount of shooting particles in the explosion
  //----------------------------------------------------------------------------------------------------------------------
  int            m_expLife = 80;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The size of the explosion particles
  //----------------------------------------------------------------------------------------------------------------------
  float          m_expSize = 70.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The range for the explosion particle emission
  //----------------------------------------------------------------------------------------------------------------------
  float          m_expIncline = 1.5f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The speed of the explosion particles
  //----------------------------------------------------------------------------------------------------------------------
  float          m_expSpeed = 1.0f;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag to clear the system
  //----------------------------------------------------------------------------------------------------------------------
  bool           m_clear = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Local transformations of the system are stored in this matrix and used for drawing
  //----------------------------------------------------------------------------------------------------------------------
  glm::mat4 m_transform = glm::mat4(1.0f);

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Default constructor that initialises member variables to default values
  //----------------------------------------------------------------------------------------------------------------------
  Emitter() = default;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor using a passed position and particle limit
  /// @param[in] _pos the position of the emitter
  /// @param[in] _max the particle limit
  //----------------------------------------------------------------------------------------------------------------------
  Emitter(glm::vec3 const&_pos, size_t const&_max);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Default destructor
  //----------------------------------------------------------------------------------------------------------------------
  ~Emitter();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initialises textures at the provided filepath
  /// @param[in] _texPath the filepath to the texture
  //----------------------------------------------------------------------------------------------------------------------
  void initTextures(std::string const&_texPath = QDir::currentPath().toStdString() + "/textures/RadialGradient.png") const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Updates all particles in the system
  //----------------------------------------------------------------------------------------------------------------------
  void update();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Draws all particles in the system
  //----------------------------------------------------------------------------------------------------------------------
  void draw() const;


  //accessors
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns the current amount of particles in the system
  //----------------------------------------------------------------------------------------------------------------------
  inline std::size_t particleCount() const { return m_particleCount; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns the maximum number of particles allowed to be in the system
  //----------------------------------------------------------------------------------------------------------------------
  inline std::size_t maxParticles() const { return m_maxParticles;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns the current size of the array
  //----------------------------------------------------------------------------------------------------------------------
  inline std::size_t vectorSize() const { return m_particles.size(); }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns the current position
  //----------------------------------------------------------------------------------------------------------------------
  inline glm::vec3 pos() const { return m_pos; }

  //mutators
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets the current position to the provided position
  /// @param[in] _pos the new position
  //----------------------------------------------------------------------------------------------------------------------
  inline void setPos(const glm::vec3 &_pos) { m_pos=_pos; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets the particle limit to the provided size provided
  /// @param[in] _max the new particle limit
  //----------------------------------------------------------------------------------------------------------------------
  inline void setMaxParticles(const size_t &_max) { m_maxParticles = _max; }

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A vector of smart unique pointers to particles within the system
  /// Pointers are used to take advantage of polymorphism and use one vector
  /// for all particles of differing types.
  //----------------------------------------------------------------------------------------------------------------------
  std::vector <std::unique_ptr<Particle>>  m_particles;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The current amount of particles in the system
  //----------------------------------------------------------------------------------------------------------------------
  std::size_t                              m_particleCount = 0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The particle limit for the system
  //----------------------------------------------------------------------------------------------------------------------
  std::size_t                              m_maxParticles = 50000;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The position of the emitter
  //----------------------------------------------------------------------------------------------------------------------
  glm::vec3                                m_pos = glm::vec3(0.0f,0.0f,0.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The current frame of the system
  //----------------------------------------------------------------------------------------------------------------------
  int                                      m_frame = 0;

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Adds the given particle to the m_particles vector
  /// @param[in] _newParticle a const reference to a pointer, which
  /// we will use to create a new unique_ptr, or reset an exisiting one
  //----------------------------------------------------------------------------------------------------------------------
  void addParticle(Particle * const &_newParticle);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spawns new particles into the system
  //----------------------------------------------------------------------------------------------------------------------
  void spawnParticles();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spawns a flame into the system
  //----------------------------------------------------------------------------------------------------------------------
  void createFlame();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spawns a firework into the system
  //----------------------------------------------------------------------------------------------------------------------
  void createFirework();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spawns an explosion into the system
  //----------------------------------------------------------------------------------------------------------------------
  void createExplosion();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calls the specific create functions to spawn all new particle objects
  //----------------------------------------------------------------------------------------------------------------------
  void createObjects();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Clears m_particles and stops spawning
  //----------------------------------------------------------------------------------------------------------------------
  void clearParticles();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Removes all dead particles from the system
  //----------------------------------------------------------------------------------------------------------------------
  void removeParticles();


}; //end class

#endif // EMITTER_H
