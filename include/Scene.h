#ifndef SCENE_H
#define SCENE_H
#include <SDL2/SDL.h>
#include <string>
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "Emitter.h"
#include "ImGUIImpl.h"

class Scene
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag to close the window
  //----------------------------------------------------------------------------------------------------------------------
  bool m_quit = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Holds the current user input
  //----------------------------------------------------------------------------------------------------------------------
  SDL_Event m_inputEvent;

public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Default constructor that initialises member variables to default values
  //----------------------------------------------------------------------------------------------------------------------
  Scene() = default;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor that takes a name, intial size and intial position to generate an SDL window,
  /// with an OpenGL context
  /// @param[in] _name the name of the window
  /// @param[in] _x the intial x position of the window
  /// @param[in] _y the intial y position of the window
  /// @param[in] _width the intial width of the window
  /// @param[in] _height the intial height of the window
  //----------------------------------------------------------------------------------------------------------------------
  Scene(std::string const&_name, int const&_x, int const&_y, int const&_width, int const&_height);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Default destructor
  //----------------------------------------------------------------------------------------------------------------------
  ~Scene();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calls SDL_GL_MakeCurrent to link our SDL_Window and OpenGL context
  //----------------------------------------------------------------------------------------------------------------------
  inline void makeCurrent() const { SDL_GL_MakeCurrent(m_sdlWin,m_glContext);}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Draws the GUI, particles and the window
  //----------------------------------------------------------------------------------------------------------------------
  void draw();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Increments the frame count by one and updates the particle system,
  /// also takes user input
  //----------------------------------------------------------------------------------------------------------------------
  void tick();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flage to update the particle system
  //----------------------------------------------------------------------------------------------------------------------
  bool m_pause = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag to take a screen shot and save as a .png image
  //----------------------------------------------------------------------------------------------------------------------
  bool m_snap = false;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Flag to draw grid
  //----------------------------------------------------------------------------------------------------------------------
  bool m_grid = true;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Holds the ImGui inputs
  //----------------------------------------------------------------------------------------------------------------------
  ImGuiIO &m_io = ImGui::GetIO();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Stores a reference to the ImGui style
  //----------------------------------------------------------------------------------------------------------------------
  ImGuiStyle &m_style = ImGui::GetStyle();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Current GUI tab
  //----------------------------------------------------------------------------------------------------------------------
  int m_tab = 0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Width of the window
  //----------------------------------------------------------------------------------------------------------------------
  int m_width = 640;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Height of the window
  //----------------------------------------------------------------------------------------------------------------------
  int m_height = 480;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Window position
  //----------------------------------------------------------------------------------------------------------------------
  glm::ivec2 m_winPos = glm::ivec2(0.0f,0.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Stores the mouse co-ordinates
  //----------------------------------------------------------------------------------------------------------------------
  glm::ivec2 m_mousePos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Stores the translation of the opengl view
  //----------------------------------------------------------------------------------------------------------------------
  glm::vec3 m_translation = glm::vec3(0.0f,-30.0f,150.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Stores the rotation of the opengl view
  //----------------------------------------------------------------------------------------------------------------------
  glm::vec2 m_rotation = glm::vec2(0.0f,0.0f);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Name of the window
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_name = "Default";
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The SDL Window
  //----------------------------------------------------------------------------------------------------------------------
  SDL_Window *m_sdlWin = NULL;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The particle Emitter
  //----------------------------------------------------------------------------------------------------------------------
  Emitter m_emit;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Stores the opengl context
  //----------------------------------------------------------------------------------------------------------------------
  SDL_GLContext m_glContext;

private:
  void init();
  void initGL() const;
  void createGLContext();
  void loadProjection(glm::mat4 _matrix) const;
  void loadModelView(glm::mat4 _matrix) const;
  void ErrorExit(std::string const&_msg) const;
  void drawGrid(int const&_num, int const&_step) const;
  void resetPos();
  void handleMouse();
  void resize() const;
  void takeScreencap() const;
  void initStyle();
  void displayGui();
  void displayFlameGui();
  void displayExplosionGui();
  void displayFireworkGui();
  void displaySystem();

};

#endif // SCENE_H
